class Player extends CharacterSprite {	var name:String;	var instrument:String;	var character_type:String = "player";	var jump_power:Number = 25;	var jump_variance = 0.1;	var frontman:Boolean = false;	var max_hp:Number = 11;	var position:Number = -1;	var positions = [280, 150, 100, 50];	function onLoad() {		Game.register("characters", this);		Game.register("players", this);		Tools.gotoRandomFrame(this["sprites"]);		this.hp = this.max_hp;		this.setPosition(position);		this.updatePartyStats();		animate("jump");		yy = 10;		// Update tokens		this.updateTokens();	}	function onEnterFrame() {		this.checkInput();		this.moveMe();		this.partyPosition();		this.checkCollision();		this.adjustScale();		this.checkCollectables();		this.attackCooldown();		this.fallDeath();		this.updatePartyStats();		if (this.position == -1) {			_root.game.party.setPositions();		}	}	function checkInput() {		// Jump stuff		if (fixed && Game.checkKey("up")) {			this.jump();		}		// Attack		if (position == 0 && Game.checkKey("space") && alive) {			attack();		}	}	function jump() {		if (fixed) {			yy += jump_power * (1 + Math.random() * jump_variance);			fixed = false;			sound("jump", position == 0 ? 100 : 100);			animate("jump");		}	}	function attack() {}	var position_move:Number = 10;	function partyPosition() {		if (_x < positions[position] + position_move && _x > positions[position] - position_move) {			_x = positions[position];		} else if (_x > positions[position]) {			_x -= position_move;		} else if (_x < positions[position]) {			_x += position_move;		}	}	function setPosition(position) {		if (this.position != position) {			this.position = position;			this.swapDepths(100 + position);			if (position == 0) {				sound("shout");				this.target_scale = 100;				this.frontman = true;			} else {				this.target_scale = 90;				this.frontman = false;			}		}	}	function checkCollectables() {		for (var i in Game.get("collectables")) {			if (this.hitTest(Game.get("collectables")[i]._x, Game.get("collectables")[i]._y, false)) {				Game.get("collectables")[i].collect(this);			}		}	}	function updatePartyStats() {		if (typeof _root.game.party.party[name] == "object") {			_root.game.party.party[name].alive = alive;			_root.game.party.party[name].hp = hp;			_root.game.party.party[name].max_hp = max_hp;			_root.game.party.setPositions();		}	}	function fallDeath() {		if (_y > Stage.height + 100) {			hp = 0;			die();			if (!this.alive) {				this.remove();			}		}	}	function trip() {		animate("trip");		sound("hit");		hit();	}	function dieExtra() {		this.updatePartyStats();		_root.game.checkAllDead();		Game.unregister(this, "players");		// Update tokens		this.updateTokens();	}		function updateTokens() {		for (var i in Game.get("tokens")) {			Game.get("tokens")[i].selectMode();		}	}}